[{"D:\\chat_dashboard\\chat_dashboard\\src\\index.js":"1","D:\\chat_dashboard\\chat_dashboard\\src\\App.js":"2","D:\\chat_dashboard\\chat_dashboard\\src\\Routes.js":"3","D:\\chat_dashboard\\chat_dashboard\\src\\components\\sendMessage.js":"4","D:\\chat_dashboard\\chat_dashboard\\src\\Home.js":"5"},{"size":441,"mtime":1611602574698,"results":"6","hashOfConfig":"7"},{"size":7270,"mtime":1623656532937,"results":"8","hashOfConfig":"7"},{"size":492,"mtime":1613546743264,"results":"9","hashOfConfig":"7"},{"size":566,"mtime":1613113015131,"results":"10","hashOfConfig":"7"},{"size":845,"mtime":1613546825704,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"1gz69s0",{"filePath":"15","messages":"16","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"D:\\chat_dashboard\\chat_dashboard\\src\\index.js",[],["25","26"],"D:\\chat_dashboard\\chat_dashboard\\src\\App.js",["27","28","29","30"],"import './App.css';\r\nimport {useEffect , useState} from 'react';\r\nimport socketIOClient from 'socket.io-client';\r\nimport Moment from 'react-moment';\r\nimport { Redirect } from 'react-router-dom';\r\nimport SocketIOFileUpload from 'socketio-file-upload';\r\nimport downloadImage from './images/downloadImage.png';\r\nimport downloadJS from 'downloadjs';\r\n\r\nconst endPoint = \"http://127.0.0.1:3000\";\r\n\r\nfunction App(props) {\r\n  //let [response, setResponse] = useState(\"\");\r\n  let [inputValue, setInputValue] = useState(\"\");\r\n  let [currentSocket, setCurrentSocket] = useState(null);\r\n  let [button, setButton] = useState(0);\r\n  let [chat, setChat] = useState([]);\r\n  \r\n  const imageClick = async (name) => {\r\n    console.log('Clicked on', name);\r\n    const res = await fetch(endPoint + `/api/download/${name}`);\r\n    const blob = await res.blob();\r\n    // const fileName = \"\";\r\n    // const extension = \"\";\r\n    // let Flag = False;\r\n    // for(var i = 0; i < name.length; i++) {\r\n    //   if(Flag == true) {\r\n    //     extension += name[i];\r\n    //   }\r\n    //   if(name[i] == '.') {Flag = True;}\r\n    //   if(flag == False) {\r\n    //     fileName += name[i];\r\n    //   }\r\n    // }\r\n    downloadJS(blob, name);\r\n  } \r\n\r\n  useEffect(() => {\r\n    const socket = socketIOClient(endPoint);\r\n    setCurrentSocket(socket);\r\n\r\n    var instance = new SocketIOFileUpload(socket);\r\n    instance.chunkSize = 1024 * 1000;\r\n    instance.maxFileSize = 39062.5 * 1024;\r\n\r\n    // Do something on upload progress:\r\n    instance.listenOnSubmit(document.getElementById(\"chat-button1\"), document.getElementById(\"file-upload\"));\r\n\r\n    instance.addEventListener(\"progress\", function(event){\r\n      var percent = event.bytesLoaded / event.file.size * 100;\r\n      console.log(\"File is\", percent.toFixed(2), \"percent loaded\");\r\n      });\r\n\r\n      // Do something when a file is uploaded:\r\n      instance.addEventListener(\"complete\", function(event){\r\n          console.log(event.success);\r\n          console.log(event.file);\r\n          document.getElementById('file-upload').value = null;\r\n      });\r\n      // for size issue\r\n      instance.addEventListener(\"error\", function(data){\r\n        if(data.code === 1) {\r\n          alert('File size should be less than 5 MB!!');\r\n          document.getElementById('file-upload').value = null;\r\n        }\r\n      }) \r\n\r\n    socket.on('connect', () => {\r\n      let queryString = props.location.search.substring(1);\r\n      let params = JSON.parse('{\"' + decodeURI(queryString).replace(/&/g, '\",\"').replace(/\\+/g, ' ').replace(/=/g,'\":\"') + '\"}');\r\n\r\n      socket.emit('join', params, function(err) {\r\n        if(err){\r\n          alert(err);\r\n          return props.history.push('/');\r\n        }else {\r\n          console.log('No Error');\r\n        }\r\n      })\r\n    })\r\n\r\n    socket.on('updateUsersList', function (users) {\r\n      let ol = document.createElement('ol');\r\n    \r\n      users.forEach(function (user) {\r\n        let li = document.createElement('li');\r\n        li.innerHTML = user;\r\n        ol.appendChild(li);\r\n      });\r\n    \r\n      let usersList = document.querySelector('#users');\r\n      usersList.innerHTML = \"\";\r\n      usersList.appendChild(ol);\r\n    })\r\n\r\n    socket.on('newMessage', data => {\r\n      let cc = <div className = \"message\">\r\n      <div className = \"message_title\">\r\n        <h4>{data.from} <Moment format = \"h:mm a\">{data.createdAt}</Moment></h4>\r\n      </div>\r\n      <div className = \"message_body\">\r\n        <p>{data.text}</p>\r\n      </div>\r\n    </div>;\r\n      setChat(prev => [...prev, cc]);\r\n      var element = document.querySelector('.chat-container');\r\n      element.scrollTop = element.scrollHeight;\r\n    })\r\n\r\n    socket.on('newLocationMessage', data => {\r\n      console.log('newLocationMessage', data);\r\n      let cc = <div className = \"message\">\r\n      <div className = \"message_title\">\r\n        <h4>{data.from} <Moment format = \"h:mm a\">{data.createdAt}</Moment></h4>\r\n      </div>\r\n      <div className = \"message_body\">\r\n        <a href = {`${data.url}`} target = \"_blank\">My current location</a>\r\n      </div>\r\n    </div>;\r\n      setChat(prev => [...prev, cc]);\r\n      var element = document.querySelector('.chat-container');\r\n      element.scrollTop = element.scrollHeight;\r\n    })\r\n\r\n    socket.on('newFileMessage', data => {\r\n      let cc = <div className = \"message\">\r\n      <div className = \"message_title\">\r\n        <h4>{data.from} <Moment format = \"h:mm a\">{data.createdAt}</Moment></h4>\r\n      </div>\r\n      <div className = \"message_body\">\r\n        <img src = {downloadImage} style = {{height: \"50px\", width: \"50px\", cursor: \"pointer\"}} onClick = {() => imageClick(data.text)}></img>\r\n        <p>{data.text}</p>\r\n      </div>\r\n    </div>;\r\n      setChat(prev => [...prev, cc]);\r\n      var element = document.querySelector('.chat-container');\r\n      element.scrollTop = element.scrollHeight;\r\n    })\r\n\r\n    return () => socket.disconnect();\r\n  },[])\r\n\r\n  const submitHandler = (event) => {\r\n    event.preventDefault();\r\n    console.log(\"button\", button);\r\n    if(button === 1){\r\n      currentSocket.emit('createMessage', {\r\n        text : {inputValue}\r\n      })\r\n      \r\n    } else if(button === 2){\r\n      if(navigator.geolocation === undefined) {\r\n        return alert('GeoLocation is not supported in your Browser :(');\r\n      }\r\n      navigator.geolocation.getCurrentPosition((position) => {\r\n        currentSocket.emit('createLocationMessage', {\r\n          lat : position.coords.latitude,\r\n          lng : position.coords.longitude\r\n        })\r\n      }, function(){\r\n        return alert('Unable to fetch Location :(');\r\n      })\r\n    }\r\n    \r\n    setInputValue(\"\");\r\n  }\r\n\r\n  const inputHandler = (event) => {\r\n    event.preventDefault();\r\n    setInputValue(event.target.value);\r\n  }\r\n\r\n  return (\r\n    <div className = \"App\">\r\n      <div className = \"main\">\r\n        <div className = \"side-bar\">\r\n          <h2>People</h2>\r\n          <div id = \"users\"></div>\r\n        </div>\r\n        <div className = \"chat\">\r\n          <div className = \"chat-container\">\r\n              {chat}\r\n          </div>\r\n          <div className = \"form-container\">\r\n            <form onSubmit = {submitHandler} className = \"form\">\r\n              <input \r\n                type = \"text\"\r\n                placeholder = \"Type here..\"\r\n                onChange = {inputHandler}\r\n                value = {inputValue}\r\n              />\r\n              <button \r\n                className = \"chat-button\"\r\n                onClick = {() => setButton(1)}\r\n                type = \"submit\"\r\n              >Submit</button>\r\n              <button\r\n                className = \"chat-button\"\r\n                onClick = {() => setButton(2)}\r\n                type = \"submit\"\r\n              >\r\n                Share Location\r\n              </button>\r\n              <input \r\n                type = \"file\"\r\n                className = \"file-upload\"\r\n                id = \"file-upload\"\r\n              />\r\n              <button \r\n                className = \"chat-button\"\r\n                onClick = {() => setButton(0)}\r\n                id = \"chat-button1\"\r\n                type = \"submit\"\r\n              >Share File</button>\r\n            </form>\r\n          </div>\r\n        </div>\r\n        \r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","D:\\chat_dashboard\\chat_dashboard\\src\\Routes.js",[],"D:\\chat_dashboard\\chat_dashboard\\src\\components\\sendMessage.js",[],["31","32"],"D:\\chat_dashboard\\chat_dashboard\\src\\Home.js",[],{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","severity":1,"message":"38","line":5,"column":10,"nodeType":"39","messageId":"40","endLine":5,"endColumn":18},{"ruleId":"41","severity":1,"message":"42","line":117,"column":9,"nodeType":"43","endLine":117,"endColumn":53},{"ruleId":"44","severity":1,"message":"45","line":131,"column":9,"nodeType":"43","endLine":131,"endColumn":137},{"ruleId":"46","severity":1,"message":"47","line":141,"column":5,"nodeType":"48","endLine":141,"endColumn":7,"suggestions":"49"},{"ruleId":"33","replacedBy":"50"},{"ruleId":"35","replacedBy":"51"},"no-native-reassign",["52"],"no-negated-in-lhs",["53"],"no-unused-vars","'Redirect' is defined but never used.","Identifier","unusedVar","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXOpeningElement","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'props.history' and 'props.location.search'. Either include them or remove the dependency array.","ArrayExpression",["54"],["52"],["53"],"no-global-assign","no-unsafe-negation",{"desc":"55","fix":"56"},"Update the dependencies array to be: [props.history, props.location.search]",{"range":"57","text":"58"},[4907,4909],"[props.history, props.location.search]"]